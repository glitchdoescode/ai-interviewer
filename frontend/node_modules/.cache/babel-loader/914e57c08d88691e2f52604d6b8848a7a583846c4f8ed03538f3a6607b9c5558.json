{"ast":null,"code":"import{useState,useEffect,useCallback,useRef}from'react';import Recorder from'recorder-js';/**\n * Custom hook for audio recording functionality\n * @returns {Object} Object containing recording state and functions\n */const useAudioRecorder=()=>{const[recorder,setRecorder]=useState(null);const[stream,setStream]=useState(null);const[isRecording,setIsRecording]=useState(false);const[audioData,setAudioData]=useState(null);const[error,setError]=useState(null);const[audioContext,setAudioContext]=useState(null);const[permissionGranted,setPermissionGranted]=useState(false);const[isInitializing,setIsInitializing]=useState(false);const initializationAttempts=useRef(0);// Clean up audio resources when the component unmounts\nuseEffect(()=>{return()=>{if(stream){// Stop all audio tracks\nstream.getTracks().forEach(track=>track.stop());}// Close audio context if it exists\nif(audioContext&&audioContext.state!=='closed'){audioContext.close();}};},[stream,audioContext]);// Initialize audio recording\nconst initRecording=useCallback(async()=>{try{// Prevent multiple initializations running simultaneously\nif(isInitializing){console.log('Already initializing audio...');return false;}setIsInitializing(true);setError(null);initializationAttempts.current+=1;console.log(`Initializing audio recording (attempt ${initializationAttempts.current})...`);// Request user permission to access the microphone\nconst audioStream=await navigator.mediaDevices.getUserMedia({audio:true});setStream(audioStream);setPermissionGranted(true);// Create an audio context\nlet context;try{context=new(window.AudioContext||window.webkitAudioContext)();// Ensure the context is running\nif(context.state!=='running'){await context.resume();}setAudioContext(context);console.log(`AudioContext created and state is: ${context.state}`);}catch(contextError){console.error('Error creating AudioContext:',contextError);setIsInitializing(false);throw new Error(`Could not create audio context: ${contextError.message}`);}// Create a new recorder with the audio context\nconst newRecorder=new Recorder(context,{onAnalysed:data=>{// You can use this callback to visualize the audio data\n// console.log('Audio data:', data);\n}});// Connect the recorder to the stream\nawait newRecorder.init(audioStream);// Save the recorder in state\nsetRecorder(newRecorder);setIsInitializing(false);console.log('Audio recording initialized successfully');return true;}catch(err){console.error('Error initializing audio recording:',err);setError(`Error accessing microphone: ${err.message}`);setIsInitializing(false);return false;}},[isInitializing]);// Start recording\nconst startRecording=useCallback(async()=>{setIsInitializing(true);// Indicate initialization/start process\nsetError(null);initializationAttempts.current=0;try{let currentRecorder=recorder;let currentContext=audioContext;// Loop to handle initialization and context resuming\nwhile(initializationAttempts.current<3){initializationAttempts.current++;console.log(`Attempt ${initializationAttempts.current} to start recording...`);// 1. Initialize if necessary\nif(!currentRecorder||!currentContext){console.log('Recorder or context missing, running initRecording...');const initialized=await initRecording();if(!initialized){console.log('Initialization failed during start attempt.');setError(prev=>prev||'Failed to initialize audio system.');continue;// Try again if attempts remain\n}// Re-fetch state after initialization\ncurrentRecorder=recorder;currentContext=audioContext;// Need a brief pause after initialization for state propagation\nawait new Promise(resolve=>setTimeout(resolve,300));}// 2. Ensure context is running\nif(currentContext&&currentContext.state!=='running'){console.log(`AudioContext state is ${currentContext.state}, attempting to resume...`);try{await currentContext.resume();// Wait for resume to potentially take effect\nawait new Promise(resolve=>setTimeout(resolve,500));console.log(`AudioContext state after resume attempt: ${currentContext.state}`);if(currentContext.state!=='running'){setError('Failed to resume AudioContext. Please interact with the page and try again.');continue;// Try again if attempts remain\n}}catch(resumeError){console.error('Error resuming AudioContext:',resumeError);setError(`Error resuming audio context: ${resumeError.message}`);continue;// Try again if attempts remain\n}}// 3. Try starting the recorder\nif(currentRecorder&&currentContext&&currentContext.state==='running'){try{console.log('Attempting to start recorder...');await currentRecorder.start();setIsRecording(true);setAudioData(null);setIsInitializing(false);console.log('Recording started successfully.');return true;// Success!\n}catch(startError){console.error(`Error starting recorder on attempt ${initializationAttempts.current}:`,startError);setError(`Error starting recording: ${startError.message}`);// Reset recorder for next attempt\nsetRecorder(null);setAudioContext(null);currentRecorder=null;currentContext=null;await new Promise(resolve=>setTimeout(resolve,200));// Brief pause before retrying\n}}else{console.log('Conditions not met for starting recorder, retrying...');// Reset if context didn't resume or recorder didn't init\nsetRecorder(null);setAudioContext(null);currentRecorder=null;currentContext=null;await new Promise(resolve=>setTimeout(resolve,200));}}// If loop finishes without success\nconsole.error('Failed to start recording after multiple attempts.');setError(prev=>prev||'Could not start recording after multiple attempts. Please check permissions or refresh the page.');setIsInitializing(false);return false;}catch(err){console.error('Unexpected error in startRecording:',err);setError(`Unexpected error: ${err.message}`);setIsInitializing(false);return false;}},[recorder,audioContext,initRecording]);// Dependencies updated\n// Stop recording and get the audio data\nconst stopRecording=useCallback(async()=>{if(!recorder||!isRecording)return null;try{const{blob,buffer}=await recorder.stop();setIsRecording(false);setAudioData({blob,buffer});return{blob,buffer};}catch(err){console.error('Error stopping recording:',err);setError(`Error stopping recording: ${err.message}`);return null;}},[recorder,isRecording]);// Convert audio blob to base64\nconst getAudioBase64=useCallback(async audioBlob=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onloadend=()=>{// Extract the base64 data from the result\n// The result is like \"data:audio/wav;base64,UklGRiXiAABXQVZF...\"\nconst base64Data=reader.result.split(',')[1];resolve(base64Data);};reader.onerror=reject;reader.readAsDataURL(audioBlob);});},[]);// Cancel recording\nconst cancelRecording=useCallback(()=>{if(recorder&&isRecording){recorder.cancel();setIsRecording(false);}setAudioData(null);},[recorder,isRecording]);return{isRecording,audioData,error,permissionGranted,isInitializing,initRecording,startRecording,stopRecording,cancelRecording,getAudioBase64};};export default useAudioRecorder;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","Recorder","useAudioRecorder","recorder","setRecorder","stream","setStream","isRecording","setIsRecording","audioData","setAudioData","error","setError","audioContext","setAudioContext","permissionGranted","setPermissionGranted","isInitializing","setIsInitializing","initializationAttempts","getTracks","forEach","track","stop","state","close","initRecording","console","log","current","audioStream","navigator","mediaDevices","getUserMedia","audio","context","window","AudioContext","webkitAudioContext","resume","contextError","Error","message","newRecorder","onAnalysed","data","init","err","startRecording","currentRecorder","currentContext","initialized","prev","Promise","resolve","setTimeout","resumeError","start","startError","stopRecording","blob","buffer","getAudioBase64","audioBlob","reject","reader","FileReader","onloadend","base64Data","result","split","onerror","readAsDataURL","cancelRecording","cancel"],"sources":["/home/glitch/Documents/ai-interviewer/frontend/src/hooks/useAudioRecorder.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport Recorder from 'recorder-js';\n\n/**\n * Custom hook for audio recording functionality\n * @returns {Object} Object containing recording state and functions\n */\nconst useAudioRecorder = () => {\n  const [recorder, setRecorder] = useState(null);\n  const [stream, setStream] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioData, setAudioData] = useState(null);\n  const [error, setError] = useState(null);\n  const [audioContext, setAudioContext] = useState(null);\n  const [permissionGranted, setPermissionGranted] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(false);\n  const initializationAttempts = useRef(0);\n\n  // Clean up audio resources when the component unmounts\n  useEffect(() => {\n    return () => {\n      if (stream) {\n        // Stop all audio tracks\n        stream.getTracks().forEach(track => track.stop());\n      }\n      \n      // Close audio context if it exists\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n    };\n  }, [stream, audioContext]);\n\n  // Initialize audio recording\n  const initRecording = useCallback(async () => {\n    try {\n      // Prevent multiple initializations running simultaneously\n      if (isInitializing) {\n        console.log('Already initializing audio...');\n        return false;\n      }\n\n      setIsInitializing(true);\n      setError(null);\n      initializationAttempts.current += 1;\n      console.log(`Initializing audio recording (attempt ${initializationAttempts.current})...`);\n      \n      // Request user permission to access the microphone\n      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setStream(audioStream);\n      setPermissionGranted(true);\n      \n      // Create an audio context\n      let context;\n      try {\n        context = new (window.AudioContext || window.webkitAudioContext)();\n        \n        // Ensure the context is running\n        if (context.state !== 'running') {\n          await context.resume();\n        }\n        \n        setAudioContext(context);\n        console.log(`AudioContext created and state is: ${context.state}`);\n      } catch (contextError) {\n        console.error('Error creating AudioContext:', contextError);\n        setIsInitializing(false);\n        throw new Error(`Could not create audio context: ${contextError.message}`);\n      }\n      \n      // Create a new recorder with the audio context\n      const newRecorder = new Recorder(context, {\n        onAnalysed: data => {\n          // You can use this callback to visualize the audio data\n          // console.log('Audio data:', data);\n        },\n      });\n\n      // Connect the recorder to the stream\n      await newRecorder.init(audioStream);\n      \n      // Save the recorder in state\n      setRecorder(newRecorder);\n      setIsInitializing(false);\n      console.log('Audio recording initialized successfully');\n      return true;\n    } catch (err) {\n      console.error('Error initializing audio recording:', err);\n      setError(`Error accessing microphone: ${err.message}`);\n      setIsInitializing(false);\n      return false;\n    }\n  }, [isInitializing]);\n\n  // Start recording\n  const startRecording = useCallback(async () => {\n    setIsInitializing(true); // Indicate initialization/start process\n    setError(null);\n    initializationAttempts.current = 0;\n\n    try {\n      let currentRecorder = recorder;\n      let currentContext = audioContext;\n\n      // Loop to handle initialization and context resuming\n      while (initializationAttempts.current < 3) {\n        initializationAttempts.current++;\n        console.log(`Attempt ${initializationAttempts.current} to start recording...`);\n\n        // 1. Initialize if necessary\n        if (!currentRecorder || !currentContext) {\n          console.log('Recorder or context missing, running initRecording...');\n          const initialized = await initRecording();\n          if (!initialized) {\n            console.log('Initialization failed during start attempt.');\n            setError(prev => prev || 'Failed to initialize audio system.');\n            continue; // Try again if attempts remain\n          }\n          // Re-fetch state after initialization\n          currentRecorder = recorder;\n          currentContext = audioContext;\n          // Need a brief pause after initialization for state propagation\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n\n        // 2. Ensure context is running\n        if (currentContext && currentContext.state !== 'running') {\n          console.log(`AudioContext state is ${currentContext.state}, attempting to resume...`);\n          try {\n            await currentContext.resume();\n            // Wait for resume to potentially take effect\n            await new Promise(resolve => setTimeout(resolve, 500)); \n            console.log(`AudioContext state after resume attempt: ${currentContext.state}`);\n            if (currentContext.state !== 'running') {\n              setError('Failed to resume AudioContext. Please interact with the page and try again.');\n              continue; // Try again if attempts remain\n            }\n          } catch (resumeError) {\n            console.error('Error resuming AudioContext:', resumeError);\n            setError(`Error resuming audio context: ${resumeError.message}`);\n            continue; // Try again if attempts remain\n          }\n        }\n\n        // 3. Try starting the recorder\n        if (currentRecorder && currentContext && currentContext.state === 'running') {\n          try {\n            console.log('Attempting to start recorder...');\n            await currentRecorder.start();\n            setIsRecording(true);\n            setAudioData(null);\n            setIsInitializing(false);\n            console.log('Recording started successfully.');\n            return true; // Success!\n          } catch (startError) {\n            console.error(`Error starting recorder on attempt ${initializationAttempts.current}:`, startError);\n            setError(`Error starting recording: ${startError.message}`);\n            // Reset recorder for next attempt\n            setRecorder(null);\n            setAudioContext(null);\n            currentRecorder = null;\n            currentContext = null;\n            await new Promise(resolve => setTimeout(resolve, 200)); // Brief pause before retrying\n          }\n        } else {\n           console.log('Conditions not met for starting recorder, retrying...');\n           // Reset if context didn't resume or recorder didn't init\n           setRecorder(null);\n           setAudioContext(null);\n           currentRecorder = null;\n           currentContext = null;\n           await new Promise(resolve => setTimeout(resolve, 200));\n        }\n      }\n\n      // If loop finishes without success\n      console.error('Failed to start recording after multiple attempts.');\n      setError(prev => prev || 'Could not start recording after multiple attempts. Please check permissions or refresh the page.');\n      setIsInitializing(false);\n      return false;\n\n    } catch (err) {\n      console.error('Unexpected error in startRecording:', err);\n      setError(`Unexpected error: ${err.message}`);\n      setIsInitializing(false);\n      return false;\n    }\n  }, [recorder, audioContext, initRecording]); // Dependencies updated\n\n  // Stop recording and get the audio data\n  const stopRecording = useCallback(async () => {\n    if (!recorder || !isRecording) return null;\n\n    try {\n      const { blob, buffer } = await recorder.stop();\n      setIsRecording(false);\n      setAudioData({ blob, buffer });\n      return { blob, buffer };\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      setError(`Error stopping recording: ${err.message}`);\n      return null;\n    }\n  }, [recorder, isRecording]);\n\n  // Convert audio blob to base64\n  const getAudioBase64 = useCallback(async (audioBlob) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        // Extract the base64 data from the result\n        // The result is like \"data:audio/wav;base64,UklGRiXiAABXQVZF...\"\n        const base64Data = reader.result.split(',')[1];\n        resolve(base64Data);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(audioBlob);\n    });\n  }, []);\n\n  // Cancel recording\n  const cancelRecording = useCallback(() => {\n    if (recorder && isRecording) {\n      recorder.cancel();\n      setIsRecording(false);\n    }\n    setAudioData(null);\n  }, [recorder, isRecording]);\n\n  return {\n    isRecording,\n    audioData,\n    error,\n    permissionGranted,\n    isInitializing,\n    initRecording,\n    startRecording,\n    stopRecording,\n    cancelRecording,\n    getAudioBase64,\n  };\n};\n\nexport default useAudioRecorder; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,MAAM,KAAQ,OAAO,CAChE,MAAO,CAAAC,QAAQ,KAAM,aAAa,CAElC;AACA;AACA;AACA,GACA,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACQ,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACU,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACY,SAAS,CAAEC,YAAY,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACc,KAAK,CAAEC,QAAQ,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACgB,YAAY,CAAEC,eAAe,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACkB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACjE,KAAM,CAACoB,cAAc,CAAEC,iBAAiB,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAAAsB,sBAAsB,CAAGnB,MAAM,CAAC,CAAC,CAAC,CAExC;AACAF,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACX,GAAIO,MAAM,CAAE,CACV;AACAA,MAAM,CAACe,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,EAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CACnD,CAEA;AACA,GAAIV,YAAY,EAAIA,YAAY,CAACW,KAAK,GAAK,QAAQ,CAAE,CACnDX,YAAY,CAACY,KAAK,CAAC,CAAC,CACtB,CACF,CAAC,CACH,CAAC,CAAE,CAACpB,MAAM,CAAEQ,YAAY,CAAC,CAAC,CAE1B;AACA,KAAM,CAAAa,aAAa,CAAG3B,WAAW,CAAC,SAAY,CAC5C,GAAI,CACF;AACA,GAAIkB,cAAc,CAAE,CAClBU,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5C,MAAO,MAAK,CACd,CAEAV,iBAAiB,CAAC,IAAI,CAAC,CACvBN,QAAQ,CAAC,IAAI,CAAC,CACdO,sBAAsB,CAACU,OAAO,EAAI,CAAC,CACnCF,OAAO,CAACC,GAAG,CAAC,yCAAyCT,sBAAsB,CAACU,OAAO,MAAM,CAAC,CAE1F;AACA,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CAC9E5B,SAAS,CAACwB,WAAW,CAAC,CACtBd,oBAAoB,CAAC,IAAI,CAAC,CAE1B;AACA,GAAI,CAAAmB,OAAO,CACX,GAAI,CACFA,OAAO,CAAG,IAAKC,MAAM,CAACC,YAAY,EAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC,CAElE;AACA,GAAIH,OAAO,CAACX,KAAK,GAAK,SAAS,CAAE,CAC/B,KAAM,CAAAW,OAAO,CAACI,MAAM,CAAC,CAAC,CACxB,CAEAzB,eAAe,CAACqB,OAAO,CAAC,CACxBR,OAAO,CAACC,GAAG,CAAC,sCAAsCO,OAAO,CAACX,KAAK,EAAE,CAAC,CACpE,CAAE,MAAOgB,YAAY,CAAE,CACrBb,OAAO,CAAChB,KAAK,CAAC,8BAA8B,CAAE6B,YAAY,CAAC,CAC3DtB,iBAAiB,CAAC,KAAK,CAAC,CACxB,KAAM,IAAI,CAAAuB,KAAK,CAAC,mCAAmCD,YAAY,CAACE,OAAO,EAAE,CAAC,CAC5E,CAEA;AACA,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAA1C,QAAQ,CAACkC,OAAO,CAAE,CACxCS,UAAU,CAAEC,IAAI,EAAI,CAClB;AACA;AAAA,CAEJ,CAAC,CAAC,CAEF;AACA,KAAM,CAAAF,WAAW,CAACG,IAAI,CAAChB,WAAW,CAAC,CAEnC;AACA1B,WAAW,CAACuC,WAAW,CAAC,CACxBzB,iBAAiB,CAAC,KAAK,CAAC,CACxBS,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CACvD,MAAO,KAAI,CACb,CAAE,MAAOmB,GAAG,CAAE,CACZpB,OAAO,CAAChB,KAAK,CAAC,qCAAqC,CAAEoC,GAAG,CAAC,CACzDnC,QAAQ,CAAC,+BAA+BmC,GAAG,CAACL,OAAO,EAAE,CAAC,CACtDxB,iBAAiB,CAAC,KAAK,CAAC,CACxB,MAAO,MAAK,CACd,CACF,CAAC,CAAE,CAACD,cAAc,CAAC,CAAC,CAEpB;AACA,KAAM,CAAA+B,cAAc,CAAGjD,WAAW,CAAC,SAAY,CAC7CmB,iBAAiB,CAAC,IAAI,CAAC,CAAE;AACzBN,QAAQ,CAAC,IAAI,CAAC,CACdO,sBAAsB,CAACU,OAAO,CAAG,CAAC,CAElC,GAAI,CACF,GAAI,CAAAoB,eAAe,CAAG9C,QAAQ,CAC9B,GAAI,CAAA+C,cAAc,CAAGrC,YAAY,CAEjC;AACA,MAAOM,sBAAsB,CAACU,OAAO,CAAG,CAAC,CAAE,CACzCV,sBAAsB,CAACU,OAAO,EAAE,CAChCF,OAAO,CAACC,GAAG,CAAC,WAAWT,sBAAsB,CAACU,OAAO,wBAAwB,CAAC,CAE9E;AACA,GAAI,CAACoB,eAAe,EAAI,CAACC,cAAc,CAAE,CACvCvB,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC,CACpE,KAAM,CAAAuB,WAAW,CAAG,KAAM,CAAAzB,aAAa,CAAC,CAAC,CACzC,GAAI,CAACyB,WAAW,CAAE,CAChBxB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC,CAC1DhB,QAAQ,CAACwC,IAAI,EAAIA,IAAI,EAAI,oCAAoC,CAAC,CAC9D,SAAU;AACZ,CACA;AACAH,eAAe,CAAG9C,QAAQ,CAC1B+C,cAAc,CAAGrC,YAAY,CAC7B;AACA,KAAM,IAAI,CAAAwC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CACxD,CAEA;AACA,GAAIJ,cAAc,EAAIA,cAAc,CAAC1B,KAAK,GAAK,SAAS,CAAE,CACxDG,OAAO,CAACC,GAAG,CAAC,yBAAyBsB,cAAc,CAAC1B,KAAK,2BAA2B,CAAC,CACrF,GAAI,CACF,KAAM,CAAA0B,cAAc,CAACX,MAAM,CAAC,CAAC,CAC7B;AACA,KAAM,IAAI,CAAAc,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CACtD3B,OAAO,CAACC,GAAG,CAAC,4CAA4CsB,cAAc,CAAC1B,KAAK,EAAE,CAAC,CAC/E,GAAI0B,cAAc,CAAC1B,KAAK,GAAK,SAAS,CAAE,CACtCZ,QAAQ,CAAC,6EAA6E,CAAC,CACvF,SAAU;AACZ,CACF,CAAE,MAAO4C,WAAW,CAAE,CACpB7B,OAAO,CAAChB,KAAK,CAAC,8BAA8B,CAAE6C,WAAW,CAAC,CAC1D5C,QAAQ,CAAC,iCAAiC4C,WAAW,CAACd,OAAO,EAAE,CAAC,CAChE,SAAU;AACZ,CACF,CAEA;AACA,GAAIO,eAAe,EAAIC,cAAc,EAAIA,cAAc,CAAC1B,KAAK,GAAK,SAAS,CAAE,CAC3E,GAAI,CACFG,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9C,KAAM,CAAAqB,eAAe,CAACQ,KAAK,CAAC,CAAC,CAC7BjD,cAAc,CAAC,IAAI,CAAC,CACpBE,YAAY,CAAC,IAAI,CAAC,CAClBQ,iBAAiB,CAAC,KAAK,CAAC,CACxBS,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9C,MAAO,KAAI,CAAE;AACf,CAAE,MAAO8B,UAAU,CAAE,CACnB/B,OAAO,CAAChB,KAAK,CAAC,sCAAsCQ,sBAAsB,CAACU,OAAO,GAAG,CAAE6B,UAAU,CAAC,CAClG9C,QAAQ,CAAC,6BAA6B8C,UAAU,CAAChB,OAAO,EAAE,CAAC,CAC3D;AACAtC,WAAW,CAAC,IAAI,CAAC,CACjBU,eAAe,CAAC,IAAI,CAAC,CACrBmC,eAAe,CAAG,IAAI,CACtBC,cAAc,CAAG,IAAI,CACrB,KAAM,IAAI,CAAAG,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAAE;AAC1D,CACF,CAAC,IAAM,CACJ3B,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC,CACpE;AACAxB,WAAW,CAAC,IAAI,CAAC,CACjBU,eAAe,CAAC,IAAI,CAAC,CACrBmC,eAAe,CAAG,IAAI,CACtBC,cAAc,CAAG,IAAI,CACrB,KAAM,IAAI,CAAAG,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CACzD,CACF,CAEA;AACA3B,OAAO,CAAChB,KAAK,CAAC,oDAAoD,CAAC,CACnEC,QAAQ,CAACwC,IAAI,EAAIA,IAAI,EAAI,kGAAkG,CAAC,CAC5HlC,iBAAiB,CAAC,KAAK,CAAC,CACxB,MAAO,MAAK,CAEd,CAAE,MAAO6B,GAAG,CAAE,CACZpB,OAAO,CAAChB,KAAK,CAAC,qCAAqC,CAAEoC,GAAG,CAAC,CACzDnC,QAAQ,CAAC,qBAAqBmC,GAAG,CAACL,OAAO,EAAE,CAAC,CAC5CxB,iBAAiB,CAAC,KAAK,CAAC,CACxB,MAAO,MAAK,CACd,CACF,CAAC,CAAE,CAACf,QAAQ,CAAEU,YAAY,CAAEa,aAAa,CAAC,CAAC,CAAE;AAE7C;AACA,KAAM,CAAAiC,aAAa,CAAG5D,WAAW,CAAC,SAAY,CAC5C,GAAI,CAACI,QAAQ,EAAI,CAACI,WAAW,CAAE,MAAO,KAAI,CAE1C,GAAI,CACF,KAAM,CAAEqD,IAAI,CAAEC,MAAO,CAAC,CAAG,KAAM,CAAA1D,QAAQ,CAACoB,IAAI,CAAC,CAAC,CAC9Cf,cAAc,CAAC,KAAK,CAAC,CACrBE,YAAY,CAAC,CAAEkD,IAAI,CAAEC,MAAO,CAAC,CAAC,CAC9B,MAAO,CAAED,IAAI,CAAEC,MAAO,CAAC,CACzB,CAAE,MAAOd,GAAG,CAAE,CACZpB,OAAO,CAAChB,KAAK,CAAC,2BAA2B,CAAEoC,GAAG,CAAC,CAC/CnC,QAAQ,CAAC,6BAA6BmC,GAAG,CAACL,OAAO,EAAE,CAAC,CACpD,MAAO,KAAI,CACb,CACF,CAAC,CAAE,CAACvC,QAAQ,CAAEI,WAAW,CAAC,CAAC,CAE3B;AACA,KAAM,CAAAuD,cAAc,CAAG/D,WAAW,CAAC,KAAO,CAAAgE,SAAS,EAAK,CACtD,MAAO,IAAI,CAAAV,OAAO,CAAC,CAACC,OAAO,CAAEU,MAAM,GAAK,CACtC,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAC/BD,MAAM,CAACE,SAAS,CAAG,IAAM,CACvB;AACA;AACA,KAAM,CAAAC,UAAU,CAAGH,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC9ChB,OAAO,CAACc,UAAU,CAAC,CACrB,CAAC,CACDH,MAAM,CAACM,OAAO,CAAGP,MAAM,CACvBC,MAAM,CAACO,aAAa,CAACT,SAAS,CAAC,CACjC,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAU,eAAe,CAAG1E,WAAW,CAAC,IAAM,CACxC,GAAII,QAAQ,EAAII,WAAW,CAAE,CAC3BJ,QAAQ,CAACuE,MAAM,CAAC,CAAC,CACjBlE,cAAc,CAAC,KAAK,CAAC,CACvB,CACAE,YAAY,CAAC,IAAI,CAAC,CACpB,CAAC,CAAE,CAACP,QAAQ,CAAEI,WAAW,CAAC,CAAC,CAE3B,MAAO,CACLA,WAAW,CACXE,SAAS,CACTE,KAAK,CACLI,iBAAiB,CACjBE,cAAc,CACdS,aAAa,CACbsB,cAAc,CACdW,aAAa,CACbc,eAAe,CACfX,cACF,CAAC,CACH,CAAC,CAED,cAAe,CAAA5D,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}