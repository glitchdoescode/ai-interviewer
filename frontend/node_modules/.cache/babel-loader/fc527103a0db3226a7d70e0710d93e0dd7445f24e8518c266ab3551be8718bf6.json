{"ast":null,"code":"import{useState,useEffect,useCallback,useRef}from'react';import Recorder from'recorder-js';/**\n * Custom hook for audio recording functionality\n * @returns {Object} Object containing recording state and functions\n */const useAudioRecorder=()=>{const[recorder,setRecorder]=useState(null);const[stream,setStream]=useState(null);const[isRecording,setIsRecording]=useState(false);const[audioData,setAudioData]=useState(null);const[error,setError]=useState(null);const[audioContext,setAudioContext]=useState(null);const[permissionGranted,setPermissionGranted]=useState(false);const[isInitializing,setIsInitializing]=useState(false);const recorderRef=useRef(null);const audioContextRef=useRef(null);// Clean up audio resources when the component unmounts\nuseEffect(()=>{return()=>{if(stream){// Stop all audio tracks\nstream.getTracks().forEach(track=>track.stop());}// Close audio context if it exists\nif(audioContext&&audioContext.state!=='closed'){audioContext.close();}};},[stream,audioContext]);// Initialize audio recording with clearer error handling\nconst initRecording=useCallback(async()=>{// Prevent multiple initializations\nif(isInitializing){console.log('Already initializing audio...');return false;}try{setIsInitializing(true);setError(null);console.log('DEBUG: Requesting microphone permission...');// Request user permission to access the microphone\nconst audioStream=await navigator.mediaDevices.getUserMedia({audio:true});console.log('DEBUG: Microphone permission granted, got stream:',!!audioStream);setStream(audioStream);setPermissionGranted(true);console.log('DEBUG: Creating audio context...');// Create an audio context\nlet context;try{// Safari requires prefix\nconst AudioContext=window.AudioContext||window.webkitAudioContext;context=new AudioContext();console.log('DEBUG: Audio context created, state:',context.state);// Ensure the context is running\nif(context.state!=='running'){console.log('DEBUG: Audio context not running, attempting to resume...');// Play a silent sound to unlock audio context (mobile browsers often need this)\nconst silentBuffer=context.createBuffer(1,1,22050);const source=context.createBufferSource();source.buffer=silentBuffer;source.connect(context.destination);source.start(0);await context.resume();console.log('DEBUG: Audio context resumed, new state:',context.state);}setAudioContext(context);audioContextRef.current=context;// Create a new recorder with the audio context\nconsole.log('DEBUG: Creating recorder instance...');const newRecorder=new Recorder(context);// Connect the recorder to the stream\nconsole.log('DEBUG: Initializing recorder with stream...');await newRecorder.init(audioStream);console.log('DEBUG: Recorder initialized successfully');setRecorder(newRecorder);recorderRef.current=newRecorder;console.log('DEBUG: Audio recording setup complete');return true;}catch(contextError){console.error('DEBUG: Error with audio context:',contextError);throw contextError;}}catch(err){console.error('DEBUG: Error initializing audio recording:',err.name,err.message);// Provide specific error messages based on the error type\nif(err.name==='NotAllowedError'){setError('Microphone permission denied. Please allow access in your browser settings.');}else if(err.name==='NotFoundError'){setError('No microphone detected. Please check your device settings.');}else if(err.name==='AbortError'){setError('Recording permission request was aborted. Please try again.');}else if(err.name==='NotReadableError'){setError('Microphone is already in use by another application.');}else{setError(`Error accessing microphone: ${err.message}`);}return false;}finally{setIsInitializing(false);}},[isInitializing]);// Start recording with improved error handling\nconst startRecording=useCallback(async()=>{try{setError(null);// Using refs to avoid timing issues with state updates\nlet currentRecorder=recorderRef.current||recorder;let currentContext=audioContextRef.current||audioContext;// Initialize recording if needed\nif(!currentRecorder||!currentContext){console.log('DEBUG: No recorder or context, initializing...');const initialized=await initRecording();if(!initialized){console.log('DEBUG: Failed to initialize recording');return false;}// Get updated refs after initialization\ncurrentRecorder=recorderRef.current;currentContext=audioContextRef.current;// Safety check\nif(!currentRecorder||!currentContext){console.error('DEBUG: Still no recorder or context after initialization');setError('Failed to initialize audio system correctly.');return false;}console.log('DEBUG: Successfully initialized recording components');}// Ensure audio context is running\nif(currentContext.state!=='running'){console.log(`DEBUG: Audio context not running (state: ${currentContext.state}), attempting to resume...`);// Try to unblock audio context (common issue on mobile)\nconst silentBuffer=currentContext.createBuffer(1,1,22050);const source=currentContext.createBufferSource();source.buffer=silentBuffer;source.connect(currentContext.destination);source.start(0);await currentContext.resume();console.log(`DEBUG: Audio context after resume: ${currentContext.state}`);if(currentContext.state!=='running'){console.error('DEBUG: Context still not running after resume');setError('Could not activate audio system. Try clicking once anywhere on the page and try again.');return false;}}// Start recording\nconsole.log('DEBUG: Starting recorder...');try{await currentRecorder.start();console.log('DEBUG: Recording started successfully');setIsRecording(true);setAudioData(null);return true;}catch(startError){console.error('DEBUG: Error calling start():',startError);setError(`Recording failed to start: ${startError.message}`);return false;}}catch(err){console.error('DEBUG: General error in startRecording:',err);setError(`Could not start recording: ${err.message}`);return false;}},[recorder,audioContext,initRecording]);// Stop recording and get the audio data\nconst stopRecording=useCallback(async()=>{const currentRecorder=recorderRef.current||recorder;if(!currentRecorder||!isRecording){console.log('DEBUG: No recorder available or not recording');return null;}try{console.log('DEBUG: Stopping recording...');const{blob,buffer}=await currentRecorder.stop();console.log('DEBUG: Recording stopped, got blob:',!!blob,'buffer:',!!buffer);setIsRecording(false);setAudioData({blob,buffer});return{blob,buffer};}catch(err){console.error('DEBUG: Error stopping recording:',err);setError(`Error stopping recording: ${err.message}`);return null;}},[recorder,isRecording]);// Convert audio blob to base64\nconst getAudioBase64=useCallback(async audioBlob=>{return new Promise((resolve,reject)=>{console.log('DEBUG: Converting audio blob to base64, size:',audioBlob.size);const reader=new FileReader();reader.onloadend=()=>{// Extract the base64 data from the result\n// The result is like \"data:audio/wav;base64,UklGRiXiAABXQVZF...\"\nconst base64Data=reader.result.split(',')[1];console.log('DEBUG: Converted blob to base64, length:',base64Data===null||base64Data===void 0?void 0:base64Data.length);resolve(base64Data);};reader.onerror=err=>{console.error('DEBUG: Error reading blob:',err);reject(err);};reader.readAsDataURL(audioBlob);});},[]);// Cancel recording\nconst cancelRecording=useCallback(()=>{const currentRecorder=recorderRef.current||recorder;if(currentRecorder&&isRecording){currentRecorder.cancel();setIsRecording(false);}setAudioData(null);},[recorder,isRecording]);// Check permission status\nconst checkPermissionStatus=useCallback(async()=>{try{console.log('DEBUG: Checking microphone permission status...');// Try a permission query first if supported\nif(navigator.permissions&&navigator.permissions.query){try{const permissionStatus=await navigator.permissions.query({name:'microphone'});console.log('DEBUG: Permission status:',permissionStatus.state);if(permissionStatus.state==='granted'){return true;}else if(permissionStatus.state==='denied'){setError('Microphone access has been denied. Please update your browser settings.');return false;}// If 'prompt', we'll fall through to enumerate devices\n}catch(permErr){console.log('DEBUG: Permission query not supported:',permErr);// Fall through to enumerate devices\n}}// Enumerate devices as a fallback\nconst devices=await navigator.mediaDevices.enumerateDevices();const audioDevices=devices.filter(device=>device.kind==='audioinput');console.log('DEBUG: Found audio input devices:',audioDevices.length);if(audioDevices.length===0){setError('No audio input devices found.');return false;}return true;}catch(err){console.error('DEBUG: Error checking permission status:',err);setError(`Error checking microphone access: ${err.message}`);return false;}},[]);return{isRecording,audioData,error,permissionGranted,isInitializing,initRecording,startRecording,stopRecording,cancelRecording,getAudioBase64,checkPermissionStatus};};export default useAudioRecorder;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","Recorder","useAudioRecorder","recorder","setRecorder","stream","setStream","isRecording","setIsRecording","audioData","setAudioData","error","setError","audioContext","setAudioContext","permissionGranted","setPermissionGranted","isInitializing","setIsInitializing","recorderRef","audioContextRef","getTracks","forEach","track","stop","state","close","initRecording","console","log","audioStream","navigator","mediaDevices","getUserMedia","audio","context","AudioContext","window","webkitAudioContext","silentBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","start","resume","current","newRecorder","init","contextError","err","name","message","startRecording","currentRecorder","currentContext","initialized","startError","stopRecording","blob","getAudioBase64","audioBlob","Promise","resolve","reject","size","reader","FileReader","onloadend","base64Data","result","split","length","onerror","readAsDataURL","cancelRecording","cancel","checkPermissionStatus","permissions","query","permissionStatus","permErr","devices","enumerateDevices","audioDevices","filter","device","kind"],"sources":["/home/glitch/Documents/ai-interviewer/frontend/src/hooks/useAudioRecorder.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport Recorder from 'recorder-js';\n\n/**\n * Custom hook for audio recording functionality\n * @returns {Object} Object containing recording state and functions\n */\nconst useAudioRecorder = () => {\n  const [recorder, setRecorder] = useState(null);\n  const [stream, setStream] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioData, setAudioData] = useState(null);\n  const [error, setError] = useState(null);\n  const [audioContext, setAudioContext] = useState(null);\n  const [permissionGranted, setPermissionGranted] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(false);\n  const recorderRef = useRef(null);\n  const audioContextRef = useRef(null);\n\n  // Clean up audio resources when the component unmounts\n  useEffect(() => {\n    return () => {\n      if (stream) {\n        // Stop all audio tracks\n        stream.getTracks().forEach(track => track.stop());\n      }\n      \n      // Close audio context if it exists\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n    };\n  }, [stream, audioContext]);\n\n  // Initialize audio recording with clearer error handling\n  const initRecording = useCallback(async () => {\n    // Prevent multiple initializations\n    if (isInitializing) {\n      console.log('Already initializing audio...');\n      return false;\n    }\n\n    try {\n      setIsInitializing(true);\n      setError(null);\n      \n      console.log('DEBUG: Requesting microphone permission...');\n      \n      // Request user permission to access the microphone\n      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      console.log('DEBUG: Microphone permission granted, got stream:', !!audioStream);\n      setStream(audioStream);\n      setPermissionGranted(true);\n      \n      console.log('DEBUG: Creating audio context...');\n      \n      // Create an audio context\n      let context;\n      try {\n        // Safari requires prefix\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        context = new AudioContext();\n        console.log('DEBUG: Audio context created, state:', context.state);\n        \n        // Ensure the context is running\n        if (context.state !== 'running') {\n          console.log('DEBUG: Audio context not running, attempting to resume...');\n          // Play a silent sound to unlock audio context (mobile browsers often need this)\n          const silentBuffer = context.createBuffer(1, 1, 22050);\n          const source = context.createBufferSource();\n          source.buffer = silentBuffer;\n          source.connect(context.destination);\n          source.start(0);\n          \n          await context.resume();\n          console.log('DEBUG: Audio context resumed, new state:', context.state);\n        }\n        \n        setAudioContext(context);\n        audioContextRef.current = context;\n        \n        // Create a new recorder with the audio context\n        console.log('DEBUG: Creating recorder instance...');\n        const newRecorder = new Recorder(context);\n        \n        // Connect the recorder to the stream\n        console.log('DEBUG: Initializing recorder with stream...');\n        await newRecorder.init(audioStream);\n        console.log('DEBUG: Recorder initialized successfully');\n        \n        setRecorder(newRecorder);\n        recorderRef.current = newRecorder;\n        \n        console.log('DEBUG: Audio recording setup complete');\n        return true;\n      } catch (contextError) {\n        console.error('DEBUG: Error with audio context:', contextError);\n        throw contextError;\n      }\n    } catch (err) {\n      console.error('DEBUG: Error initializing audio recording:', err.name, err.message);\n      \n      // Provide specific error messages based on the error type\n      if (err.name === 'NotAllowedError') {\n        setError('Microphone permission denied. Please allow access in your browser settings.');\n      } else if (err.name === 'NotFoundError') {\n        setError('No microphone detected. Please check your device settings.');\n      } else if (err.name === 'AbortError') {\n        setError('Recording permission request was aborted. Please try again.');\n      } else if (err.name === 'NotReadableError') {\n        setError('Microphone is already in use by another application.');\n      } else {\n        setError(`Error accessing microphone: ${err.message}`);\n      }\n      \n      return false;\n    } finally {\n      setIsInitializing(false);\n    }\n  }, [isInitializing]);\n\n  // Start recording with improved error handling\n  const startRecording = useCallback(async () => {\n    try {\n      setError(null);\n      \n      // Using refs to avoid timing issues with state updates\n      let currentRecorder = recorderRef.current || recorder;\n      let currentContext = audioContextRef.current || audioContext;\n      \n      // Initialize recording if needed\n      if (!currentRecorder || !currentContext) {\n        console.log('DEBUG: No recorder or context, initializing...');\n        const initialized = await initRecording();\n        if (!initialized) {\n          console.log('DEBUG: Failed to initialize recording');\n          return false;\n        }\n        \n        // Get updated refs after initialization\n        currentRecorder = recorderRef.current;\n        currentContext = audioContextRef.current;\n        \n        // Safety check\n        if (!currentRecorder || !currentContext) {\n          console.error('DEBUG: Still no recorder or context after initialization');\n          setError('Failed to initialize audio system correctly.');\n          return false;\n        }\n        \n        console.log('DEBUG: Successfully initialized recording components');\n      }\n      \n      // Ensure audio context is running\n      if (currentContext.state !== 'running') {\n        console.log(`DEBUG: Audio context not running (state: ${currentContext.state}), attempting to resume...`);\n        \n        // Try to unblock audio context (common issue on mobile)\n        const silentBuffer = currentContext.createBuffer(1, 1, 22050);\n        const source = currentContext.createBufferSource();\n        source.buffer = silentBuffer;\n        source.connect(currentContext.destination);\n        source.start(0);\n        \n        await currentContext.resume();\n        console.log(`DEBUG: Audio context after resume: ${currentContext.state}`);\n        \n        if (currentContext.state !== 'running') {\n          console.error('DEBUG: Context still not running after resume');\n          setError('Could not activate audio system. Try clicking once anywhere on the page and try again.');\n          return false;\n        }\n      }\n      \n      // Start recording\n      console.log('DEBUG: Starting recorder...');\n      try {\n        await currentRecorder.start();\n        console.log('DEBUG: Recording started successfully');\n        setIsRecording(true);\n        setAudioData(null);\n        return true;\n      } catch (startError) {\n        console.error('DEBUG: Error calling start():', startError);\n        setError(`Recording failed to start: ${startError.message}`);\n        return false;\n      }\n    } catch (err) {\n      console.error('DEBUG: General error in startRecording:', err);\n      setError(`Could not start recording: ${err.message}`);\n      return false;\n    }\n  }, [recorder, audioContext, initRecording]);\n\n  // Stop recording and get the audio data\n  const stopRecording = useCallback(async () => {\n    const currentRecorder = recorderRef.current || recorder;\n    \n    if (!currentRecorder || !isRecording) {\n      console.log('DEBUG: No recorder available or not recording');\n      return null;\n    }\n\n    try {\n      console.log('DEBUG: Stopping recording...');\n      const { blob, buffer } = await currentRecorder.stop();\n      console.log('DEBUG: Recording stopped, got blob:', !!blob, 'buffer:', !!buffer);\n      setIsRecording(false);\n      setAudioData({ blob, buffer });\n      return { blob, buffer };\n    } catch (err) {\n      console.error('DEBUG: Error stopping recording:', err);\n      setError(`Error stopping recording: ${err.message}`);\n      return null;\n    }\n  }, [recorder, isRecording]);\n\n  // Convert audio blob to base64\n  const getAudioBase64 = useCallback(async (audioBlob) => {\n    return new Promise((resolve, reject) => {\n      console.log('DEBUG: Converting audio blob to base64, size:', audioBlob.size);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        // Extract the base64 data from the result\n        // The result is like \"data:audio/wav;base64,UklGRiXiAABXQVZF...\"\n        const base64Data = reader.result.split(',')[1];\n        console.log('DEBUG: Converted blob to base64, length:', base64Data?.length);\n        resolve(base64Data);\n      };\n      reader.onerror = (err) => {\n        console.error('DEBUG: Error reading blob:', err);\n        reject(err);\n      };\n      reader.readAsDataURL(audioBlob);\n    });\n  }, []);\n\n  // Cancel recording\n  const cancelRecording = useCallback(() => {\n    const currentRecorder = recorderRef.current || recorder;\n    if (currentRecorder && isRecording) {\n      currentRecorder.cancel();\n      setIsRecording(false);\n    }\n    setAudioData(null);\n  }, [recorder, isRecording]);\n  \n  // Check permission status\n  const checkPermissionStatus = useCallback(async () => {\n    try {\n      console.log('DEBUG: Checking microphone permission status...');\n      // Try a permission query first if supported\n      if (navigator.permissions && navigator.permissions.query) {\n        try {\n          const permissionStatus = await navigator.permissions.query({ name: 'microphone' });\n          console.log('DEBUG: Permission status:', permissionStatus.state);\n          \n          if (permissionStatus.state === 'granted') {\n            return true;\n          } else if (permissionStatus.state === 'denied') {\n            setError('Microphone access has been denied. Please update your browser settings.');\n            return false;\n          }\n          // If 'prompt', we'll fall through to enumerate devices\n        } catch (permErr) {\n          console.log('DEBUG: Permission query not supported:', permErr);\n          // Fall through to enumerate devices\n        }\n      }\n      \n      // Enumerate devices as a fallback\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const audioDevices = devices.filter(device => device.kind === 'audioinput');\n      \n      console.log('DEBUG: Found audio input devices:', audioDevices.length);\n      \n      if (audioDevices.length === 0) {\n        setError('No audio input devices found.');\n        return false;\n      }\n      \n      return true;\n    } catch (err) {\n      console.error('DEBUG: Error checking permission status:', err);\n      setError(`Error checking microphone access: ${err.message}`);\n      return false;\n    }\n  }, []);\n\n  return {\n    isRecording,\n    audioData,\n    error,\n    permissionGranted,\n    isInitializing,\n    initRecording,\n    startRecording,\n    stopRecording,\n    cancelRecording,\n    getAudioBase64,\n    checkPermissionStatus\n  };\n};\n\nexport default useAudioRecorder; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}