{"ast":null,"code":"import axios from'axios';// Base URL for API requests\nconst API_URL='/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});/**\n * Start a new interview session\n * @param {string} message - Initial user message\n * @param {string} userId - Optional user ID\n * @returns {Promise} Promise with response data\n */export const startInterview=async function(message){let userId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const response=await api.post('/interview',{message,user_id:userId});return response.data;}catch(error){console.error('Error starting interview:',error);throw error;}};/**\n * Continue an existing interview session\n * @param {string} sessionId - Interview session ID\n * @param {string} message - User message\n * @param {string} userId - User ID\n * @returns {Promise} Promise with response data\n */export const continueInterview=async(sessionId,message,userId)=>{try{const response=await api.post(`/interview/${sessionId}`,{message,user_id:userId});return response.data;}catch(error){console.error('Error continuing interview:',error);throw error;}};/**\n * Get all sessions for a user\n * @param {string} userId - User ID\n * @param {boolean} includeCompleted - Whether to include completed sessions\n * @returns {Promise} Promise with response data\n */export const getUserSessions=async function(userId){let includeCompleted=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{const response=await api.get(`/sessions/${userId}`,{params:{include_completed:includeCompleted}});return response.data;}catch(error){console.error('Error getting user sessions:',error);throw error;}};/**\n * Transcribe audio and get a response\n * @param {string} audioBase64 - Base64-encoded audio data\n * @param {string} userId - User ID\n * @param {string} sessionId - Optional session ID\n * @returns {Promise} Promise with response data\n */export const transcribeAndRespond=async function(audioBase64,userId){let sessionId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{const response=await api.post('/audio/transcribe',{audio_base64:audioBase64,user_id:userId,session_id:sessionId});return response.data;}catch(error){console.error('Error transcribing audio:',error);throw error;}};/**\n * Check if voice processing is available\n * @returns {Promise<boolean>} Promise with boolean indicating if voice is available\n */export const checkVoiceAvailability=async()=>{try{const response=await api.get('/health');return response.data.voice_processing==='available';}catch(error){console.error('Error checking voice availability:',error);return false;}};// Create a service object to export\nconst interviewService={startInterview,continueInterview,getUserSessions,transcribeAndRespond,checkVoiceAvailability};export default interviewService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","startInterview","message","userId","arguments","length","undefined","response","post","user_id","data","error","console","continueInterview","sessionId","getUserSessions","includeCompleted","get","params","include_completed","transcribeAndRespond","audioBase64","audio_base64","session_id","checkVoiceAvailability","voice_processing","interviewService"],"sources":["/home/glitch/Documents/ai-interviewer/frontend/src/api/interviewService.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for API requests\nconst API_URL = '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n/**\n * Start a new interview session\n * @param {string} message - Initial user message\n * @param {string} userId - Optional user ID\n * @returns {Promise} Promise with response data\n */\nexport const startInterview = async (message, userId = null) => {\n  try {\n    const response = await api.post('/interview', {\n      message,\n      user_id: userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error starting interview:', error);\n    throw error;\n  }\n};\n\n/**\n * Continue an existing interview session\n * @param {string} sessionId - Interview session ID\n * @param {string} message - User message\n * @param {string} userId - User ID\n * @returns {Promise} Promise with response data\n */\nexport const continueInterview = async (sessionId, message, userId) => {\n  try {\n    const response = await api.post(`/interview/${sessionId}`, {\n      message,\n      user_id: userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error continuing interview:', error);\n    throw error;\n  }\n};\n\n/**\n * Get all sessions for a user\n * @param {string} userId - User ID\n * @param {boolean} includeCompleted - Whether to include completed sessions\n * @returns {Promise} Promise with response data\n */\nexport const getUserSessions = async (userId, includeCompleted = false) => {\n  try {\n    const response = await api.get(`/sessions/${userId}`, {\n      params: { include_completed: includeCompleted }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting user sessions:', error);\n    throw error;\n  }\n};\n\n/**\n * Transcribe audio and get a response\n * @param {string} audioBase64 - Base64-encoded audio data\n * @param {string} userId - User ID\n * @param {string} sessionId - Optional session ID\n * @returns {Promise} Promise with response data\n */\nexport const transcribeAndRespond = async (audioBase64, userId, sessionId = null) => {\n  try {\n    const response = await api.post('/audio/transcribe', {\n      audio_base64: audioBase64,\n      user_id: userId,\n      session_id: sessionId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error transcribing audio:', error);\n    throw error;\n  }\n};\n\n/**\n * Check if voice processing is available\n * @returns {Promise<boolean>} Promise with boolean indicating if voice is available\n */\nexport const checkVoiceAvailability = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data.voice_processing === 'available';\n  } catch (error) {\n    console.error('Error checking voice availability:', error);\n    return false;\n  }\n};\n\n// Create a service object to export\nconst interviewService = {\n  startInterview,\n  continueInterview,\n  getUserSessions,\n  transcribeAndRespond,\n  checkVoiceAvailability\n};\n\nexport default interviewService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}